#pragma kernel FrustumAndHiZCullingCSMain
#pragma kernel FillHistogramTableCSMain
#pragma kernel ColumnScanHistogramTableCSMain
#pragma kernel PrefixScanCSMain
#pragma kernel PrefixScanTableCSMain
#pragma kernel FillIndirectArgsCSMain
#pragma kernel RearrangeCSMain

#pragma multi_compile_local __ _COMPUTE_SHADER_UV_STARTS_AT_TOP
#pragma multi_compile_local __ _COMPUTE_SHADER_REVERSED_Z

// Read Write Buffer
StructuredBuffer<float3> _AllInstancePositions;
StructuredBuffer<float4> _AllInstanceTransforms;
StructuredBuffer<uint> _AllInstanceInfos;
StructuredBuffer<uint2> _AllTypesInfos;
StructuredBuffer<float> _TypeLodThresholds;
RWStructuredBuffer<uint> _DrawIndirectArgs;

RWStructuredBuffer<uint4> _IndicesDistancesTypesLods;
RWStructuredBuffer<uint> _Counter;

Texture2D _DepthMipmapTexture;
float4 _DepthTextureSize;

float4x4 _MatrixVP;
float3 _CameraPos;
float3 _CameraDir;

float _BoundingBoxRadius;
float _MaxCullingDistance;

uint _VertexCounts;
uint _ResultCounts;
uint _EnableCulling;

uint _TypeCount;
uint _TotalLodCounts;

#define GROUP_SIZE 64

#define DIST_BIT 8
#define DIST_SIZE (1 << DIST_BIT) // 256
#define DIST_MASK (DIST_SIZE - 1) // 255

#define MAX_LOD_COUNT 4

[numthreads(GROUP_SIZE, 1, 1)]
void FrustumAndHiZCullingCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID,
    uint3 id : SV_DispatchThreadID)
{
    uint vertexIndex = groupId.x * GROUP_SIZE + groupIndex;

    if (vertexIndex >= _VertexCounts)
    {
        return;
    }

    uint type = _AllInstanceInfos[vertexIndex];
    float boundingBoxWidth = _AllInstanceTransforms[vertexIndex].x;
    float boundingBoxHeight = _AllInstanceTransforms[vertexIndex].y;
    
    // Frustum culling
    float3 positionWS = _AllInstancePositions[vertexIndex];
    float4 positionCS = mul(_MatrixVP, float4(positionWS, 1.0));
    float4 positionNearCS = mul(_MatrixVP, float4(positionWS - normalize(_CameraDir) * boundingBoxWidth, 1.0));
    
    float distance = positionCS.w; // dot((positionWS - _CameraPos), normalize(_CameraDir));
    float radiusSS = boundingBoxWidth / max(distance, 1.0) * _DepthTextureSize.y;

    float culling = 0.0;
    culling += step(distance + radiusSS, 0.0);                                               // Cull back
    culling += step(_MaxCullingDistance, distance - radiusSS);                               // Cull front
    culling += max(abs(positionCS.x) - boundingBoxWidth * _DepthTextureSize.z,
        abs(positionCS.y) - boundingBoxHeight) > positionCS.w;                   // Cull up,down,left,right
    
    culling = saturate(culling);
    if (culling > 0.5)
    {
        return;
    }

    // HiZ culling
    float2 positionNDC = (positionCS.xy / positionCS.w) * 0.5 + 0.5;

    #if _COMPUTE_SHADER_UV_STARTS_AT_TOP
        positionNDC.y = 1.0 - positionNDC.y;
    #endif
    
    uint mipLevel = clamp((uint)log2(radiusSS), 0, 8);
    uint2 texSize = (uint2)_DepthTextureSize.xy / (1 << mipLevel);
    uint2 indexLB = clamp(uint2(positionNDC * texSize - 0.5), 0, texSize - 1);
    float depth = positionNearCS.z / positionNearCS.w;
    float depthLB = _DepthMipmapTexture.mips[mipLevel][indexLB + uint2(0, 0)].r;
    float depthRB = _DepthMipmapTexture.mips[mipLevel][indexLB + uint2(1, 0)].r;
    float depthLU = _DepthMipmapTexture.mips[mipLevel][indexLB + uint2(0, 1)].r;
    float depthRU = _DepthMipmapTexture.mips[mipLevel][indexLB + uint2(1, 1)].r;
    
    #if _COMPUTE_SHADER_REVERSED_Z
        float mapDepth = min(min(depthLB, depthRB), min(depthLU, depthRU));
        culling += step(depth, mapDepth);
    #else
        float mapDepth = max(max(depthLB, depthRB), max(depthLU, depthRU));
        culling += step(mapDepth, depth);
    #endif

    culling = saturate(culling);
    if (culling > 0.5)
    {
        return;
    }

    // Calculate LOD
    uint2 lodInfo = _AllTypesInfos[type];
    uint lodThresholdIndex = lodInfo.x * MAX_LOD_COUNT;
    uint lodCount = lodInfo.y;
    uint lod = 0;
    for (uint i = 0; i < lodCount; ++i)
    {
        float prevLodThreshold = 0.0;
        float currLodThreshold = _TypeLodThresholds[lodThresholdIndex + i];
        if (i > 0)
        {
            prevLodThreshold = _TypeLodThresholds[lodThresholdIndex + i - 1];
        }

        if (prevLodThreshold <= distance && currLodThreshold > distance)
        {
            lod = i;
            break;
        }
        else
        {
            lod = MAX_LOD_COUNT;
        }
    }
    culling = step((float)MAX_LOD_COUNT - 0.5, (float)lod);
    if (culling > 0.5)
    {
        return;
    }

    // Append
    distance = lerp(distance, _MaxCullingDistance, culling);
    uint quantizedDistance = (uint)((distance / _MaxCullingDistance) * (float)DIST_MASK) & DIST_MASK;

    uint index;
    InterlockedAdd(_Counter[0], 1, index);
    _IndicesDistancesTypesLods[index] = uint4(vertexIndex, quantizedDistance, type, lod);
}

#undef GROUP_SIZE

#define GROUP_SIZE DIST_SIZE

RWStructuredBuffer<uint4> _TempIndicesDistancesTypesLods;
RWStructuredBuffer<uint> _HistogramTable;
RWStructuredBuffer<uint> _PrefixScan;

groupshared uint sharedMemory[DIST_SIZE];
groupshared uint sharedMemoryPrefixScan[DIST_SIZE];

uint pow2(uint v)
{
    return ((uint)1 << v);
}

uint GetRadix(uint4 indDistTypeLod)
{
    uint type = indDistTypeLod.z;
    uint lod = indDistTypeLod.w;
    return ((type << 2) & 0xfc) + (lod & 0x3);
}

// Per vertex have a thread
[numthreads(GROUP_SIZE, 1, 1)]
void FillHistogramTableCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID,
    uint3 id : SV_DispatchThreadID)
{
    uint threadIndex = groupId.x * GROUP_SIZE + groupIndex;

    // Initialize shared memory
    sharedMemory[groupIndex] = 0;
    
    GroupMemoryBarrierWithGroupSync();

    uint4 indDistTypeLod = _IndicesDistancesTypesLods[threadIndex];
    _TempIndicesDistancesTypesLods[threadIndex] = indDistTypeLod;
    
    uint index = GetRadix(indDistTypeLod);
    
    if (threadIndex < _Counter[0])
    {
        InterlockedAdd(sharedMemory[index], 1);
    }

    GroupMemoryBarrierWithGroupSync();

    _HistogramTable[threadIndex] = sharedMemory[groupIndex];
}

// Per quantized distance have a thread, only one group
[numthreads(GROUP_SIZE, 1, 1)]
void ColumnScanHistogramTableCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID,
    uint3 id : SV_DispatchThreadID)
{
    uint histogramCount = (uint)ceil((float)_Counter[0] / GROUP_SIZE);
    uint sum = 0;
    
    for (uint i = 0; i < histogramCount; ++i)
    {
        uint index = DIST_SIZE * i + groupIndex;
        sum += _HistogramTable[index];
        _HistogramTable[index] = sum;
    }
}

// Per quantized distance have a thread, only one group
[numthreads(GROUP_SIZE, 1, 1)]
void PrefixScanCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    uint histogramCount = (uint)ceil((float)_Counter[0] / GROUP_SIZE);

    sharedMemoryPrefixScan[groupIndex] = _HistogramTable[DIST_SIZE * (histogramCount - 1) + groupIndex];
    sharedMemory[groupIndex] = sharedMemoryPrefixScan[groupIndex];

    GroupMemoryBarrierWithGroupSync();

    uint range = (uint)(log2(DIST_SIZE));
    for (uint j = 0; j < range; ++j)
    {
        if (groupIndex >= pow2(j))
        {
            sharedMemory[groupIndex] = sharedMemoryPrefixScan[groupIndex] + sharedMemoryPrefixScan[groupIndex - pow2(j)];
        }

        GroupMemoryBarrierWithGroupSync();

        sharedMemoryPrefixScan[groupIndex] = sharedMemory[groupIndex];

        GroupMemoryBarrierWithGroupSync();
    }
    
    _PrefixScan[groupIndex + 1] = sharedMemoryPrefixScan[groupIndex];

    if (groupIndex == 0)
    {
        _PrefixScan[0] = 0;
    }
}

// Per vertex have a thread
[numthreads(GROUP_SIZE, 1, 1)]
void PrefixScanTableCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    uint threadIndex = groupId.x * GROUP_SIZE + groupIndex;
    
    if (threadIndex >= _Counter[0])
    {
        return;
    }
    
    uint index = groupId.x * GROUP_SIZE + groupIndex;
    sharedMemory[groupIndex] = _HistogramTable[index];

    GroupMemoryBarrierWithGroupSync();

    sharedMemory[groupIndex] += _PrefixScan[groupIndex];
    _HistogramTable[index] = sharedMemory[groupIndex];
}

// Per vertex have a thread
[numthreads(GROUP_SIZE, 1, 1)]
void FillIndirectArgsCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    uint threadIndex = groupId.x * GROUP_SIZE + groupIndex;
    
    if (threadIndex >= _Counter[0])
    {
        return;
    }

    // Fill indirect args
    _DrawIndirectArgs[threadIndex * 5 + 4] = _PrefixScan[threadIndex];
    _DrawIndirectArgs[threadIndex * 5 + 1] = _PrefixScan[threadIndex + 1] - _PrefixScan[threadIndex];
}

// Per group only execute one thread
[numthreads(GROUP_SIZE, 1, 1)]
void RearrangeCSMain(uint groupIndex : SV_GroupIndex, uint3 groupId : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    if (groupIndex > 0)
    {
        return;
    }

    uint threadIndex = groupId.x * GROUP_SIZE + groupIndex;
    
    if (threadIndex >= _Counter[0])
    {
        return;
    }

    _Counter[0] = 0;

    for (uint i = 0; i < DIST_SIZE; ++i)
    {
        uint4 indDistTypeLod = _TempIndicesDistancesTypesLods[groupId.x * DIST_SIZE + i];
        uint radix = GetRadix(indDistTypeLod);
        uint index = 0;

        if (groupId.x == 0)
        {
            index = _PrefixScan[radix];
            _PrefixScan[radix]++;
        }
        else
        {
            uint ind = DIST_SIZE * (groupId.x - 1) + radix;
            index = _HistogramTable[ind];
            _HistogramTable[ind]++;
        }

        _IndicesDistancesTypesLods[index] = indDistTypeLod;
    }
}
